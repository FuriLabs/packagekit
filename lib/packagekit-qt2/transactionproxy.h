/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c TransactionProxy -p transactionproxy -m -N ../../src/org.freedesktop.PackageKit.Transaction.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TRANSACTIONPROXY_H_1342360651
#define TRANSACTIONPROXY_H_1342360651

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.PackageKit.Transaction
 */
class TransactionProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.PackageKit.Transaction"; }

public:
    TransactionProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~TransactionProxy();

    Q_PROPERTY(bool AllowCancel READ allowCancel)
    inline bool allowCancel() const
    { return qvariant_cast< bool >(property("AllowCancel")); }

    Q_PROPERTY(bool CallerActive READ callerActive)
    inline bool callerActive() const
    { return qvariant_cast< bool >(property("CallerActive")); }

    Q_PROPERTY(qulonglong DownloadSizeRemaining READ downloadSizeRemaining)
    inline qulonglong downloadSizeRemaining() const
    { return qvariant_cast< qulonglong >(property("DownloadSizeRemaining")); }

    Q_PROPERTY(uint ElapsedTime READ elapsedTime)
    inline uint elapsedTime() const
    { return qvariant_cast< uint >(property("ElapsedTime")); }

    Q_PROPERTY(QString LastPackage READ lastPackage)
    inline QString lastPackage() const
    { return qvariant_cast< QString >(property("LastPackage")); }

    Q_PROPERTY(uint Percentage READ percentage)
    inline uint percentage() const
    { return qvariant_cast< uint >(property("Percentage")); }

    Q_PROPERTY(uint RemainingTime READ remainingTime)
    inline uint remainingTime() const
    { return qvariant_cast< uint >(property("RemainingTime")); }

    Q_PROPERTY(uint Role READ role)
    inline uint role() const
    { return qvariant_cast< uint >(property("Role")); }

    Q_PROPERTY(uint Speed READ speed)
    inline uint speed() const
    { return qvariant_cast< uint >(property("Speed")); }

    Q_PROPERTY(uint Status READ status)
    inline uint status() const
    { return qvariant_cast< uint >(property("Status")); }

    Q_PROPERTY(uint Uid READ uid)
    inline uint uid() const
    { return qvariant_cast< uint >(property("Uid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AcceptEula(const QString &eula_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(eula_id);
        return asyncCallWithArgumentList(QLatin1String("AcceptEula"), argumentList);
    }

    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Cancel"), argumentList);
    }

    inline QDBusPendingReply<> DownloadPackages(bool store_in_cache, const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(store_in_cache) << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("DownloadPackages"), argumentList);
    }

    inline QDBusPendingReply<> GetCategories()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetCategories"), argumentList);
    }

    inline QDBusPendingReply<> GetDepends(qulonglong filter, const QStringList &package_ids, bool recursive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(package_ids) << QVariant::fromValue(recursive);
        return asyncCallWithArgumentList(QLatin1String("GetDepends"), argumentList);
    }

    inline QDBusPendingReply<> GetDetails(const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("GetDetails"), argumentList);
    }

    inline QDBusPendingReply<> GetDistroUpgrades()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetDistroUpgrades"), argumentList);
    }

    inline QDBusPendingReply<> GetFiles(const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("GetFiles"), argumentList);
    }

    inline QDBusPendingReply<> GetOldTransactions(uint number)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(number);
        return asyncCallWithArgumentList(QLatin1String("GetOldTransactions"), argumentList);
    }

    inline QDBusPendingReply<> GetPackages(qulonglong filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("GetPackages"), argumentList);
    }

    inline QDBusPendingReply<> GetRepoList(qulonglong filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("GetRepoList"), argumentList);
    }

    inline QDBusPendingReply<> GetRequires(qulonglong filter, const QStringList &package_ids, bool recursive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(package_ids) << QVariant::fromValue(recursive);
        return asyncCallWithArgumentList(QLatin1String("GetRequires"), argumentList);
    }

    inline QDBusPendingReply<> GetUpdateDetail(const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("GetUpdateDetail"), argumentList);
    }

    inline QDBusPendingReply<> GetUpdates(qulonglong filter)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter);
        return asyncCallWithArgumentList(QLatin1String("GetUpdates"), argumentList);
    }

    inline QDBusPendingReply<> InstallFiles(qulonglong transaction_flags, const QStringList &full_paths)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transaction_flags) << QVariant::fromValue(full_paths);
        return asyncCallWithArgumentList(QLatin1String("InstallFiles"), argumentList);
    }

    inline QDBusPendingReply<> InstallPackages(qulonglong transaction_flags, const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transaction_flags) << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("InstallPackages"), argumentList);
    }

    inline QDBusPendingReply<> InstallSignature(uint sig_type, const QString &key_id, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sig_type) << QVariant::fromValue(key_id) << QVariant::fromValue(package_id);
        return asyncCallWithArgumentList(QLatin1String("InstallSignature"), argumentList);
    }

    inline QDBusPendingReply<> RefreshCache(bool force)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(force);
        return asyncCallWithArgumentList(QLatin1String("RefreshCache"), argumentList);
    }

    inline QDBusPendingReply<> RemovePackages(qulonglong transaction_flags, const QStringList &package_ids, bool allow_deps, bool autoremove)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transaction_flags) << QVariant::fromValue(package_ids) << QVariant::fromValue(allow_deps) << QVariant::fromValue(autoremove);
        return asyncCallWithArgumentList(QLatin1String("RemovePackages"), argumentList);
    }

    inline QDBusPendingReply<> RepairSystem(qulonglong transaction_flags)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transaction_flags);
        return asyncCallWithArgumentList(QLatin1String("RepairSystem"), argumentList);
    }

    inline QDBusPendingReply<> RepoEnable(const QString &repo_id, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(repo_id) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("RepoEnable"), argumentList);
    }

    inline QDBusPendingReply<> RepoSetData(const QString &repo_id, const QString &parameter, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(repo_id) << QVariant::fromValue(parameter) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("RepoSetData"), argumentList);
    }

    inline QDBusPendingReply<> Resolve(qulonglong filter, const QStringList &packages)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(packages);
        return asyncCallWithArgumentList(QLatin1String("Resolve"), argumentList);
    }

    inline QDBusPendingReply<> SearchDetails(qulonglong filter, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QLatin1String("SearchDetails"), argumentList);
    }

    inline QDBusPendingReply<> SearchFiles(qulonglong filter, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QLatin1String("SearchFiles"), argumentList);
    }

    inline QDBusPendingReply<> SearchGroups(qulonglong filter, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QLatin1String("SearchGroups"), argumentList);
    }

    inline QDBusPendingReply<> SearchNames(qulonglong filter, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QLatin1String("SearchNames"), argumentList);
    }

    inline QDBusPendingReply<> SetHints(const QStringList &hints)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(hints);
        return asyncCallWithArgumentList(QLatin1String("SetHints"), argumentList);
    }

    inline QDBusPendingReply<> UpdatePackages(qulonglong transaction_flags, const QStringList &package_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transaction_flags) << QVariant::fromValue(package_ids);
        return asyncCallWithArgumentList(QLatin1String("UpdatePackages"), argumentList);
    }

    inline QDBusPendingReply<> UpgradeSystem(const QString &distro_id, uint upgrade_kind)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(distro_id) << QVariant::fromValue(upgrade_kind);
        return asyncCallWithArgumentList(QLatin1String("UpgradeSystem"), argumentList);
    }

    inline QDBusPendingReply<> WhatProvides(qulonglong filter, uint type, const QStringList &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filter) << QVariant::fromValue(type) << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QLatin1String("WhatProvides"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Category(const QString &parent_id, const QString &cat_id, const QString &name, const QString &summary, const QString &icon);
    void Changed();
    void Destroy();
    void Details(const QString &package_id, const QString &license, uint group, const QString &detail, const QString &url, qulonglong size);
    void DistroUpgrade(uint type, const QString &name, const QString &summary);
    void ErrorCode(uint code, const QString &details);
    void EulaRequired(const QString &eula_id, const QString &package_id, const QString &vendor_name, const QString &license_agreement);
    void Files(const QString &package_id, const QStringList &file_list);
    void Finished(uint exit, uint runtime);
    void ItemProgress(const QString &id, uint status, uint percentage);
    void MediaChangeRequired(uint media_type, const QString &media_id, const QString &media_text);
    void Message(uint type, const QString &details);
    void Package(uint info, const QString &package_id, const QString &summary);
    void RepoDetail(const QString &repo_id, const QString &description, bool enabled);
    void RepoSignatureRequired(const QString &package_id, const QString &repository_name, const QString &key_url, const QString &key_userid, const QString &key_id, const QString &key_fingerprint, const QString &key_timestamp, uint type);
    void RequireRestart(uint type, const QString &package_id);
    void Transaction(const QDBusObjectPath &object_path, const QString &timespec, bool succeeded, uint role, uint duration, const QString &data, uint uid, const QString &cmdline);
    void UpdateDetail(const QString &package_id, const QStringList &updates, const QStringList &obsoletes, const QStringList &vendor_urls, const QStringList &bugzilla_urls, const QStringList &cve_urls, uint restart, const QString &update_text, const QString &changelog, uint state, const QString &issued, const QString &updated);
};

#endif
