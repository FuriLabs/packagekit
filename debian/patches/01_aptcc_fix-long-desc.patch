From 04b2660b48216eff77eb9815590f12af0a04d360 Mon Sep 17 00:00:00 2001
From: Daniel Nicoletti <dantti12@gmail.com>
Date: Wed, 24 Aug 2011 14:30:07 -0300
Subject: [PATCH] aptcc: Fix crash when long description blow char buffer, remove some mem leaks too

---
 backends/aptcc/apt-utils.cpp |   11 ++++-------
 backends/aptcc/apt.cpp       |   12 +++++++++---
 2 files changed, 13 insertions(+), 10 deletions(-)

--- a/backends/aptcc/apt-utils.cpp
+++ b/backends/aptcc/apt-utils.cpp
@@ -26,10 +26,7 @@
 #include <fstream>
 #include <sys/stat.h>
 
-static int descrBufferSize = 4096;
-static char *descrBuffer = new char[descrBufferSize];
-
-static char *debParser(string descr);
+static string debParser(string descr);
 
 string get_default_short_description(const pkgCache::VerIterator &ver,
 				    pkgRecords *records)
@@ -113,7 +110,7 @@
 	}
 }
 
-static char *debParser(string descr)
+static string debParser(string descr)
 {
 	// Policy page on package descriptions
 	// http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description
@@ -158,8 +155,8 @@
 		removedFullStop = false;
 		nlpos++;
 	}
-	strcpy(descrBuffer, descr.c_str());
-	return descrBuffer;
+
+	return descr;
 }
 
 PkGroupEnum
--- a/backends/aptcc/apt.cpp
+++ b/backends/aptcc/apt.cpp
@@ -351,6 +351,7 @@
 			   state,
 			   package_id,
 			   get_short_description(ver, packageRecords).c_str());
+        g_free(package_id);
 }
 
 void aptcc::emit_packages(vector<pair<pkgCache::PkgIterator, pkgCache::VerIterator> > &output,
@@ -494,6 +495,7 @@
                                      ver.VerStr(),
                                      ver.Arch(),
                                      vf.File().Archive() == NULL ? "" : vf.File().Archive());
+
     pk_backend_details(m_backend,
                        package_id,
                        "unknown",
@@ -501,6 +503,8 @@
                        get_long_description_parsed(ver, packageRecords).c_str(),
                        rec.Homepage().c_str(),
                        size);
+
+    g_free(package_id);
 }
 
 // used to emit packages it collects all the needed info
@@ -703,9 +707,9 @@
     string archive = vf.File().Archive() == NULL ? "" : vf.File().Archive();
     gchar *package_id;
     package_id = pk_package_id_build(pkg.Name(),
-                    candver.VerStr(),
-                    candver.Arch(),
-                    archive.c_str());
+                                     candver.VerStr(),
+                                     candver.Arch(),
+                                     archive.c_str());
 
     PkUpdateStateEnum updateState = PK_UPDATE_STATE_ENUM_UNKNOWN;
     if (archive.compare("stable") == 0) {
@@ -740,6 +744,8 @@
                              issued.c_str(), //const gchar *issued_text
                              updated.c_str() //const gchar *updated_text
                              );
+    g_free(current_package_id);
+    g_free(package_id);
 }
 
 void aptcc::get_depends(vector<pair<pkgCache::PkgIterator, pkgCache::VerIterator> > &output,
