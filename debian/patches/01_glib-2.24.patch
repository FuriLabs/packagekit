From: Julian Andres Klode <jak@debian.org>
Date: Sun, 19 Dec 2010 18:27:23 +0100
Subject: Add support for GLib 2.24

Backport PackageKit to use only functionality found in GLib

--- a/lib/packagekit-glib2/pk-client-helper.c
+++ b/lib/packagekit-glib2/pk-client-helper.c
@@ -471,7 +471,7 @@ pk_client_helper_start (PkClientHelper *
 		goto out;
 
 	/* bind to the socket */
-	address = g_unix_socket_address_new_with_type (socket_filename, -1, G_UNIX_SOCKET_ADDRESS_PATH);
+	address = g_unix_socket_address_new (socket_filename);
 	ret = g_socket_bind (priv->socket, address, TRUE, error);
 	if (!ret)
 		goto out;
--- a/backends/dummy/pk-backend-dummy.c
+++ b/backends/dummy/pk-backend-dummy.c
@@ -1141,7 +1141,7 @@ pk_backend_update_system (PkBackend *bac
 	g_socket_set_keepalive (_socket, TRUE);
 
 	/* connect to it */
-	address = g_unix_socket_address_new_with_type (frontend_socket, -1, G_UNIX_SOCKET_ADDRESS_PATH);
+	address = g_unix_socket_address_new (frontend_socket);
 	ret = g_socket_connect (_socket, address, NULL, &error);
 	if (!ret) {
 		pk_backend_error_code (backend, PK_ERROR_ENUM_INTERNAL_ERROR,
--- a/lib/packagekit-glib2/pk-self-test.c
+++ b/lib/packagekit-glib2/pk-self-test.c
@@ -375,7 +375,7 @@ pk_test_client_helper_func (void)
 	g_socket_set_keepalive (socket, TRUE);
 
 	/* connect to it */
-	address = g_unix_socket_address_new_with_type (filename, -1, G_UNIX_SOCKET_ADDRESS_PATH);
+	address = g_unix_socket_address_new (filename);
 	ret = g_socket_connect (socket, address, NULL, &error);
 	g_assert_no_error (error);
 	g_assert (ret);
--- a/lib/packagekit-glib2/pk-socket-example.c
+++ b/lib/packagekit-glib2/pk-socket-example.c
@@ -83,7 +83,7 @@ main (void)
 	g_socket_set_keepalive (socket, TRUE);
 
 	/* connect to it */
-	address = g_unix_socket_address_new_with_type (socket_filename, -1, G_UNIX_SOCKET_ADDRESS_PATH);
+	address = g_unix_socket_address_new (socket_filename);
 	ret = g_socket_connect (socket, address, NULL, &error);
 	if (!ret) {
 		g_warning ("failed to connect to socket: %s", error->message);
--- a/backends/aptcc/apt.cpp
+++ b/backends/aptcc/apt.cpp
@@ -692,8 +692,7 @@ void aptcc::emit_update_detail(const pkg
                            G_REGEX_MATCH_ANCHORED,
                            0);
     GRegex *regexDate;
-    regexDate = g_regex_new("^ -- (?'maintainer'.+) (?'mail'<.+>)  (?'dayname'\\w+,) "
-"(?'d'\\d+) (?'m'\\w+) (?'y'\\d+) (?'H'\\d+):(?'M'\\d+):(?'s'\\d+) (?'offset'[-\\+]\\d+)$",
+    regexDate = g_regex_new("^ -- (?'maintainer'.+) (?'mail'<.+>)  (?'date'.+)$",
                             G_REGEX_CASELESS,
                             G_REGEX_MATCH_ANCHORED,
                             0);
@@ -745,39 +744,15 @@ void aptcc::emit_update_detail(const pkg
             // and when it got updated
             GMatchInfo *match_info;
             if (g_regex_match(regexDate, str, G_REGEX_MATCH_ANCHORED, &match_info)) {
-                gchar *tz;
-                gchar *year;
-                gchar *month;
-                gchar *day;
-                gchar *hour;
-                gchar *minute;
-                gchar *seconds;
-                tz = g_match_info_fetch_named(match_info, "offset");
-                year = g_match_info_fetch_named(match_info, "y");
-                month = g_match_info_fetch_named(match_info, "m");
-                day = g_match_info_fetch_named(match_info, "d");
-                hour = g_match_info_fetch_named(match_info, "H");
-                minute = g_match_info_fetch_named(match_info, "M");
-                seconds = g_match_info_fetch_named(match_info, "s");
-                GDateTime *dateTime;
-                dateTime = dateFromString(tz,
-                                          year,
-                                          month,
-                                          day,
-                                          hour,
-                                          minute,
-                                          seconds);
-                g_free(tz);
-                g_free(year);
-                g_free(month);
-                g_free(day);
-                g_free(hour);
-                g_free(minute);
-                g_free(seconds);
+                GTimeVal dateTime = {0, 0};
+                gchar *date;
+                date = g_match_info_fetch_named(match_info, "date");
+                g_warn_if_fail(RFC1123StrToTime(date, dateTime.tv_sec));
+                g_free(date);
 
-                issued = g_date_time_format(dateTime, "%FT%R:%S");
+                issued = g_time_val_to_iso8601(&dateTime);
                 if (updated.empty()) {
-                    updated = g_date_time_format(dateTime, "%FT%R:%S");
+                    updated = g_time_val_to_iso8601(&dateTime);
                 }
             }
             g_match_info_free(match_info);
--- a/backends/aptcc/apt-utils.cpp
+++ b/backends/aptcc/apt-utils.cpp
@@ -406,52 +406,6 @@ bool starts_with (const string &str, con
 	return str.size() >= startSize && (strncmp(str.data(), start, startSize) == 0);
 }
 
-GDateTime* dateFromString(const gchar *tz,
-                          const gchar *year,
-                          const gchar *month,
-                          const gchar *day,
-                          const gchar *hour,
-                          const gchar *minute,
-                          const gchar *seconds)
-{
-    GDateTime *ret;
-    int monthI;
-    if (strcmp(month, "Jan") == 0) {
-        monthI = 1;
-    } else if (strcmp(month, "Feb") == 0) {
-        monthI = 2;
-    } else if (strcmp(month, "Mar") == 0) {
-        monthI = 3;
-    } else if (strcmp(month, "Apr") == 0) {
-        monthI = 4;
-    } else if (strcmp(month, "May") == 0) {
-        monthI = 5;
-    } else if (strcmp(month, "Jun") == 0) {
-        monthI = 6;
-    } else if (strcmp(month, "Jul") == 0) {
-        monthI = 7;
-    } else if (strcmp(month, "Aug") == 0) {
-        monthI = 8;
-    } else if (strcmp(month, "Sep") == 0) {
-        monthI = 9;
-    } else if (strcmp(month, "Oct") == 0) {
-        monthI = 10;
-    } else if (strcmp(month, "Nov") == 0) {
-        monthI = 11;
-    } else if (strcmp(month, "Dez") == 0) {
-        monthI = 12;
-    }
-
-    ret = g_date_time_new(g_time_zone_new(tz),
-                          atoi(year),
-                          monthI,
-                          atoi(day),
-                          atoi(hour),
-                          atoi(minute),
-                          atoi(seconds));
-    return ret;
-}
-
 const char *utf8(const char *str)
 {
    static char *_str = NULL;
--- a/backends/aptcc/apt-utils.h
+++ b/backends/aptcc/apt-utils.h
@@ -139,13 +139,6 @@ bool ends_with(const string &str, const
   */
 bool starts_with(const string &str, const char *end);
 
-GDateTime* dateFromString(const gchar *tz,
-                          const gchar *year,
-                          const gchar *month,
-                          const gchar *day,
-                          const gchar *hour,
-                          const gchar *minute,
-                          const gchar *seconds);
 /**
   * Return an utf8 string
   */
