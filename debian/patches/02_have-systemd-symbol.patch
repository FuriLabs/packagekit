From 7fb2de2e56d0dd3fad7ed34b6160ec54b3eb7a40 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Tue, 23 Sep 2014 14:55:03 +0100
Subject: [PATCH] trivial: Use HAVE_SYSTEMD as the automake and config.h symbol

This is typical to other projects.
---
 configure.ac     |  3 +--
 data/Makefile.am |  2 +-
 src/pk-dbus.c    |  8 ++++----
 src/pk-engine.c  | 12 ++++++------
 4 files changed, 12 insertions(+), 13 deletions(-)

diff --git a/configure.ac b/configure.ac
index a0ad837..b2b112e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -242,14 +242,13 @@ dnl - Use systemd and logind rather than ConsoleKit
 dnl ---------------------------------------------------------------------------
 AC_ARG_ENABLE(systemd, AS_HELP_STRING([--enable-systemd],[enable systemd and logind code]),
 	      enable_systemd=$enableval,enable_systemd=yes)
-AM_CONDITIONAL(PK_BUILD_SYSTEMD, test x$enable_systemd = xyes)
 if test x$enable_systemd = xyes; then
 	PKG_CHECK_MODULES(SYSTEMD, libsystemd-login libsystemd-journal)
 	AC_ARG_WITH([systemdsystemunitdir],
 		    AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files]),
 		    [],
 		    [with_systemdsystemunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)])
-	AC_DEFINE(PK_BUILD_SYSTEMD,1,[Build systemd code])
+	AC_DEFINE(HAVE_SYSTEMD,1,[Build systemd code])
 	AC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])
 fi
 AM_CONDITIONAL(HAVE_SYSTEMD, [test -n "$with_systemdsystemunitdir"])
diff --git a/data/Makefile.am b/data/Makefile.am
index c30134c..99019c4 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -25,7 +25,7 @@ systemdservice_in_files =				\
 	packagekit.service.in				\
 	packagekit-offline-update.service.in
 
-if PK_BUILD_SYSTEMD
+if HAVE_SYSTEMD
 systemdservicedir       = $(systemdsystemunitdir)
 systemdservice_DATA     = $(systemdservice_in_files:.service.in=.service)
 endif
diff --git a/src/pk-dbus.c b/src/pk-dbus.c
index 15302e5..380968b 100644
--- a/src/pk-dbus.c
+++ b/src/pk-dbus.c
@@ -27,7 +27,7 @@
 #include <glib.h>
 #include <gio/gio.h>
 
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
  #include <systemd/sd-login.h>
 #endif
 
@@ -178,7 +178,7 @@ pk_dbus_get_cmdline (PkDbus *dbus, const gchar *sender)
 	return cmdline;
 }
 
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 /**
  * pk_dbus_get_session_systemd:
  **/
@@ -221,7 +221,7 @@ gchar *
 pk_dbus_get_session (PkDbus *dbus, const gchar *sender)
 {
 	gchar *session = NULL;
-#ifndef PK_BUILD_SYSTEMD
+#ifndef HAVE_SYSTEMD
 	_cleanup_error_free_ GError *error = NULL;
 #endif
 	guint pid;
@@ -251,7 +251,7 @@ pk_dbus_get_session (PkDbus *dbus, const gchar *sender)
 	}
 
 	/* get session from systemd or ConsoleKit */
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	session = pk_dbus_get_session_systemd (pid);
 #else
 	/* get session from ConsoleKit */
diff --git a/src/pk-engine.c b/src/pk-engine.c
index 5a7d177..e434c88 100644
--- a/src/pk-engine.c
+++ b/src/pk-engine.c
@@ -95,7 +95,7 @@ struct PkEnginePrivate
 	guint			 owner_id;
 	GDBusNodeInfo		*introspection;
 	GDBusConnection		*connection;
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	GDBusProxy		*logind_proxy;
 	gint			 logind_fd;
 #endif
@@ -261,7 +261,7 @@ pk_engine_emit_offline_property_changed (PkEngine *engine,
 static void
 pk_engine_inhibit (PkEngine *engine)
 {
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	_cleanup_error_free_ GError *error = NULL;
 	_cleanup_variant_unref_ GVariant *res = NULL;
 
@@ -300,7 +300,7 @@ pk_engine_inhibit (PkEngine *engine)
 static void
 pk_engine_uninhibit (PkEngine *engine)
 {
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	if (engine->priv->logind_fd == 0) {
 		g_warning ("no fd to close");
 		return;
@@ -1611,7 +1611,7 @@ pk_engine_offline_method_call (GDBusConnection *connection_, const gchar *sender
 	}
 }
 
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 /**
  * pk_engine_proxy_logind_cb:
  **/
@@ -1653,7 +1653,7 @@ pk_engine_on_bus_acquired_cb (GDBusConnection *connection,
 	/* save copy for emitting signals */
 	engine->priv->connection = g_object_ref (connection);
 
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	/* connect to logind */
 	g_dbus_proxy_new (connection,
 			  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES,
@@ -1817,7 +1817,7 @@ pk_engine_finalize (GObject *object)
 	if (engine->priv->connection != NULL)
 		g_object_unref (engine->priv->connection);
 
-#ifdef PK_BUILD_SYSTEMD
+#ifdef HAVE_SYSTEMD
 	/* uninhibit */
 	if (engine->priv->logind_fd != 0)
 		close (engine->priv->logind_fd);
