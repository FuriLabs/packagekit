From 8a09c32f2530267a2b7969cb50521186be0be84e Mon Sep 17 00:00:00 2001
From: Daniel Nicoletti <dantti85-pk@yahoo.com.br>
Date: Sun, 12 Jun 2011 02:14:49 -0300
Subject: [PATCH] aptcc: Fix getDetails to actually use the resolved version when displaying info, fixed debian bug #606135

---
 backends/aptcc/apt.cpp              |   25 +++++++++++++++++++------
 backends/aptcc/apt.h                |    6 +++---
 backends/aptcc/pk-backend-aptcc.cpp |   34 ++++++++++++++++++++--------------
 3 files changed, 42 insertions(+), 23 deletions(-)

diff --git a/backends/aptcc/apt.cpp b/backends/aptcc/apt.cpp
index d8873f2..74d4cf9 100644
--- a/backends/aptcc/apt.cpp
+++ b/backends/aptcc/apt.cpp
@@ -180,12 +180,14 @@ void aptcc::cancel()
 }

 pair<pkgCache::PkgIterator, pkgCache::VerIterator>
-		      aptcc::find_package_id(const gchar *package_id)
+		      aptcc::find_package_id(const gchar *package_id, bool &found)
 {
 	gchar **parts;
 	pkgCache::VerIterator ver;
 	pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;

+    found = true;
+
 	parts = pk_package_id_split (package_id);
 	pkg_ver.first = packageCache->FindPkg(parts[PK_PACKAGE_ID_NAME]);

@@ -217,6 +219,7 @@ pair<pkgCache::PkgIterator, pkgCache::VerIterator>
 		return pkg_ver;
 	}

+    found = false;
 	g_strfreev (parts);
 	return pkg_ver;
 }
@@ -460,9 +463,14 @@ void aptcc::povidesCodec(vector<pair<pkgCache::PkgIterator, pkgCache::VerIterato
 }

 // used to emit packages it collects all the needed info
-void aptcc::emit_details(const pkgCache::PkgIterator &pkg)
+void aptcc::emit_details(const pkgCache::PkgIterator &pkg, const pkgCache::VerIterator &version)
 {
-	pkgCache::VerIterator ver = find_ver(pkg);
+	pkgCache::VerIterator ver;
+    if (version.end() == false) {
+        ver = version;
+    } else {
+        ver = find_ver(pkg);
+    }
 	std::string section = ver.Section() == NULL ? "" : ver.Section();

 	size_t found;
@@ -487,10 +495,10 @@ void aptcc::emit_details(const pkgCache::PkgIterator &pkg)
 }

 // used to emit packages it collects all the needed info
-void aptcc::emit_update_detail(const pkgCache::PkgIterator &pkg)
+void aptcc::emit_update_detail(const pkgCache::PkgIterator &pkg, const pkgCache::VerIterator &version)
 {
     // Get the version of the current package
-    pkgCache::VerIterator     currver = find_ver(pkg);
+    pkgCache::VerIterator currver = find_ver(pkg);
     pkgCache::VerFileIterator currvf  = currver.FileList();
     // Build a package_id from the current version
     gchar *current_package_id;
@@ -500,7 +508,12 @@ void aptcc::emit_update_detail(const pkgCache::PkgIterator &pkg)
                                              currvf.File().Archive() == NULL ? "" : currvf.File().Archive());

     // Get the update version
-    pkgCache::VerIterator candver = find_candidate_ver(pkg);
+    pkgCache::VerIterator candver;
+    if (version.end() == false) {
+        candver = version;
+    } else {
+        candver = find_candidate_ver(pkg);
+    }

     pkgCache::VerFileIterator vf = candver.FileList();
     string origin = vf.File().Origin() == NULL ? "" : vf.File().Origin();
diff --git a/backends/aptcc/apt.h b/backends/aptcc/apt.h
index 891bab8..02d7f91 100644
--- a/backends/aptcc/apt.h
+++ b/backends/aptcc/apt.h
@@ -62,7 +62,7 @@ public:
 	// Check the returned VerIterator.end()
 	// if it's true we could not find it
 	pair<pkgCache::PkgIterator, pkgCache::VerIterator>
-			find_package_id(const gchar *package_id);
+			find_package_id(const gchar *package_id, bool &found);
 	pkgCache::VerIterator find_ver(const pkgCache::PkgIterator &pkg);
 	pkgCache::VerIterator find_candidate_ver(const pkgCache::PkgIterator &pkg);

@@ -110,12 +110,12 @@ public:
 	/**
 	 *  Emits details
 	 */
-	void emit_details(const pkgCache::PkgIterator &pkg);
+	void emit_details(const pkgCache::PkgIterator &pkg, const pkgCache::VerIterator &ver);

 	/**
 	 *  Emits update detail
 	 */
-	void emit_update_detail(const pkgCache::PkgIterator &pkg);
+	void emit_update_detail(const pkgCache::PkgIterator &pkg, const pkgCache::VerIterator &ver);

 	/**
 	 *  seems to install packages
diff --git a/backends/aptcc/pk-backend-aptcc.cpp b/backends/aptcc/pk-backend-aptcc.cpp
index 5ca8fab..9321b8a 100644
--- a/backends/aptcc/pk-backend-aptcc.cpp
+++ b/backends/aptcc/pk-backend-aptcc.cpp
@@ -194,8 +194,9 @@ backend_get_depends_or_requires_thread (PkBackend *backend)
 		}

 		pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;
-		pkg_ver = m_apt->find_package_id(pi);
-		if (pkg_ver.second.end() == true)
+        bool found;
+		pkg_ver = m_apt->find_package_id(pi, found);
+		if (!found)
 		{
 			pk_backend_error_code (backend,
 					       PK_ERROR_ENUM_PACKAGE_NOT_FOUND,
@@ -288,8 +289,9 @@ backend_get_files_thread (PkBackend *backend)
 		}

 		pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;
-		pkg_ver = m_apt->find_package_id(pi);
-		if (pkg_ver.second.end() == true)
+        bool found;
+		pkg_ver = m_apt->find_package_id(pi, found);
+		if (!found)
 		{
 			pk_backend_error_code (backend, PK_ERROR_ENUM_PACKAGE_NOT_FOUND, "Couldn't find package");
 			delete m_apt;
@@ -358,8 +360,9 @@ backend_get_details_thread (PkBackend *backend)
 		}

 		pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;
-		pkg_ver = m_apt->find_package_id(pi);
-		if (pkg_ver.second.end() == true)
+        bool found;
+		pkg_ver = m_apt->find_package_id(pi, found);
+		if (!found)
 		{
 			pk_backend_error_code (backend,
 					       PK_ERROR_ENUM_PACKAGE_NOT_FOUND,
@@ -371,9 +374,9 @@ backend_get_details_thread (PkBackend *backend)
 		}

 		if (updateDetail) {
-			m_apt->emit_update_detail(pkg_ver.first);
+			m_apt->emit_update_detail(pkg_ver.first, pkg_ver.second);
 		} else {
-			m_apt->emit_details(pkg_ver.first);
+			m_apt->emit_details(pkg_ver.first, pkg_ver.second);
 		}
 	}

@@ -672,9 +675,10 @@ pk_backend_download_packages_thread (PkBackend *backend)
 		}

 		pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;
-		pkg_ver = m_apt->find_package_id(pi);
+        bool found;
+		pkg_ver = m_apt->find_package_id(pi, found);
 		// Ignore packages that could not be found or that exist only due to dependencies.
-		if (pkg_ver.second.end() == true)
+		if (!found)
 		{
 			_error->Error("Can't find this package id \"%s\".", pi);
 			continue;
@@ -854,9 +858,10 @@ pk_backend_resolve_thread (PkBackend *backend)
 				output.push_back(pkg_ver);
 			}
 		} else {
-			pkg_ver = m_apt->find_package_id(pi);
+            bool found;
+			pkg_ver = m_apt->find_package_id(pi, found);
 			// check to see if we found the package
-			if (pkg_ver.second.end() == false)
+			if (found)
 			{
 				output.push_back(pkg_ver);
 			}
@@ -1209,9 +1214,10 @@ backend_manage_packages_thread (PkBackend *backend)
 		}

 		pair<pkgCache::PkgIterator, pkgCache::VerIterator> pkg_ver;
-		pkg_ver = m_apt->find_package_id(pi);
+        bool found;
+		pkg_ver = m_apt->find_package_id(pi, found);
 		// Ignore packages that could not be found or that exist only due to dependencies.
-		if (pkg_ver.second.end() == true)
+		if (!found)
 		{
 			pk_backend_error_code (backend,
 					       PK_ERROR_ENUM_PACKAGE_NOT_FOUND,
--
1.6.1
